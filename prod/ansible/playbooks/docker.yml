# /usr/bin/ansible-pull -U https://github.com/truedem0n/homelab.git prod/ansible/playbooks/docker.yml
---
- name: Install Docker on Debian/Ubuntu
  hosts: localhost
  connection: local
  become: true
  gather_facts: true # Ensure facts are gathered

  vars:
    git_repo_url: "https://github.com/truedem0n/homelab.git"
    ansible_playbook_path: "prod/ansible/playbooks/docker.yml"

  tasks:
    # --- Docker Installation Prerequisites for Debian/Ubuntu ---
    - name: Install prerequisites for Docker APT repository
      ansible.builtin.apt:
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present
        update_cache: true # Update cache once at the beginning
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Create /etc/apt/keyrings directory if it doesn't exist
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Download Docker GPG key
      ansible.builtin.get_url:
        url: "https://download.docker.com/linux/{{ ansible_distribution | lower }}/gpg"
        dest: /etc/apt/keyrings/docker.asc
        mode: "0644"
        force: true
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Get distribution codename
      ansible.builtin.command:
        cmd: lsb_release -cs
      register: dist_codename
      changed_when: false
      check_mode: false # This task should always run, even in check mode
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      failed_when: dist_codename.rc != 0 # Fail if lsb_release command fails

    - name: Add Docker repository to Apt sources
      ansible.builtin.apt_repository:
        # FORCE amd64 architecture identifier, as Docker uses this instead of x86_64
        repo: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/{{ ansible_distribution | lower }} {{ dist_codename.stdout }} stable"
        filename: docker
        state: present
      when: >
        (ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu') and
        (ansible_architecture == 'x86_64' or ansible_architecture == 'amd64')
      # Note: If you need ARM support later, you'll need to adjust the arch mapping (e.g., aarch64 -> arm64)

    # --- Explicit APT Cache Update ---
    - name: Update apt cache after adding Docker repo
      ansible.builtin.apt:
        update_cache: true
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'
      changed_when: false # Cache update itself doesn't represent a configuration change

    # --- Install Docker Packages ---
    - name: Install Docker packages (Debian/Ubuntu)
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    - name: Install additional useful packages (Debian/Ubuntu)
      ansible.builtin.apt:
        name:
          - nfs-common
        state: present
      when: ansible_distribution == 'Debian' or ansible_distribution == 'Ubuntu'

    # --- Common Configuration ---
    - name: Create Docker configuration directory
      ansible.builtin.file:
        path: /etc/docker
        state: directory
        mode: '0755'

    - name: Configure Docker daemon to listen on TCP and Socket
      ansible.builtin.copy:
        content: |
          {
            "hosts": ["tcp://0.0.0.0:2375", "unix:///var/run/docker.sock"]
          }
        dest: /etc/docker/daemon.json
        mode: '0644'
      notify: Restart Docker Service

    - name: Schedule daily Docker system prune
      ansible.builtin.cron:
        name: "Run Docker system prune with logging"
        job: "/usr/bin/docker system prune -af > /var/log/docker-prune.log 2>&1"
        special_time: "daily"
        state: present

    - name: Ensure Docker service is started and enabled
      ansible.builtin.service:
        name: docker
        state: started
        enabled: true

  handlers:
    - name: Restart Docker Service
      ansible.builtin.service:
        name: docker
        state: restarted