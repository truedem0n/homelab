#!/usr/bin/env python3
import os
import subprocess
import ipaddress

def get_public_ip():
    try:
        return subprocess.check_output("curl -s https://api.ipify.org", shell=True).decode().strip()
    except Exception as e:
        print("❌ Failed to get public IP:", e)
        return "<unknown>"

SERVER_PORT = 51820
SERVER_ENDPOINT = f"{get_public_ip()}:{SERVER_PORT}"
WG_CONFIG = "/etc/wireguard/wg0.conf"
CLIENTS_DIR = "./clients"
SUBNET = ipaddress.IPv4Network("10.8.0.0/24")
SERVER_IP = "10.8.0.1"
QR_ENABLED = True

def run_cmd(cmd):
    return subprocess.check_output(cmd, shell=True).decode().strip()

def generate_keys():
    private_key = run_cmd("wg genkey")
    public_key = run_cmd(f"echo '{private_key}' | wg pubkey")
    return private_key, public_key

def find_used_ips():
    used = set()
    if not os.path.exists(WG_CONFIG):
        return used
    with open(WG_CONFIG) as f:
        for line in f:
            if "AllowedIPs" in line:
                ip = line.split("=")[1].strip().split("/")[0]
                used.add(ip)
    return used

def get_next_ip():
    used_ips = find_used_ips()
    for ip in SUBNET.hosts():
        if str(ip) == SERVER_IP:
            continue
        if str(ip) not in used_ips:
            return str(ip)
    raise RuntimeError("No available IPs left in subnet.")

def generate_client_config(name, client_ip, client_privkey, server_pubkey):
    return f"""
[Interface]
PrivateKey = {client_privkey}
Address = {client_ip}/32
DNS = 1.1.1.1

[Peer]
PublicKey = {server_pubkey}
Endpoint = {SERVER_ENDPOINT}
AllowedIPs = 0.0.0.0/0
PersistentKeepalive = 25
"""

def append_peer_to_server(name, client_pubkey, client_ip):
    peer_config = f"""
[Peer]
# {name}
PublicKey = {client_pubkey}
AllowedIPs = {client_ip}/32
"""
    with open(WG_CONFIG, "a") as f:
        f.write(peer_config)

def save_client_file(name, config):
    os.makedirs(CLIENTS_DIR, exist_ok=True)
    path = os.path.join(CLIENTS_DIR, f"{name}.conf")
    with open(path, "w") as f:
        f.write(config.strip())
    return path

def show_qr(config_path):
    try:
        subprocess.run(["qrencode", "-t", "ansiutf8", "-r", config_path], check=True)
    except FileNotFoundError:
        print("⚠️ qrencode not installed. Skipping QR code.")

def restart_wireguard():
    os.system("systemctl restart wg-quick@wg0")

def main():
    name = input("Enter peer name (no spaces): ").strip()
    if not name:
        print("❌ Invalid name.")
        return

    client_ip = get_next_ip()
    print(f"🔢 Assigning IP: {client_ip}")

    print("🔑 Generating keys...")
    client_priv, client_pub = generate_keys()

    server_pub = open("/etc/wireguard/publickey").read().strip()

    print("📦 Writing peer to server config...")
    append_peer_to_server(name, client_pub, client_ip)

    print("📄 Creating client config...")
    client_config = generate_client_config(name, client_ip, client_priv, server_pub)
    client_path = save_client_file(name, client_config)

    if QR_ENABLED:
        print("📱 QR Code for mobile import:")
        show_qr(client_path)

    print("🔁 Restarting WireGuard...")
    restart_wireguard()
    print("✅ Done. Client config: ", client_path)

if __name__ == "__main__":
    main()
